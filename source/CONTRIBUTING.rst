Внесение вклада в проект
########################

Этот документ предоставляет руководство по тому, как внести вклад в проект на GitHub.

Основные ветки проекта
======================

``master``
----------

Ветка ``master`` ветка используется для хранения стабильных и релизных версий проекта. Это значит, что код в этой ветке должен быть прошедшим проверку на ошибки и тестирование.
Все изменения вносятся в ветку ``master`` только после тщательного тестирования и проверки их стабильности в ветке ``develop``.

``develop``
-----------

Ветка ``develop`` используется для разработки новых функций и исправления ошибок. Она является основной для всех дополнений, изменений и правок в проекте. Она может считаться более "нестабильной" в сравнении с ``master``, так как новый код добавляется сюда для дальнейшей проверки и тестирования.

Все новые изменения вносятся в ветку ``develop``, где они могут быть объединены и протестированы вместе с другими изменениями.

Шаг 1: Создание форка
=====================

Создайте форк репозитория -- собственную копию, с которой будете работать.

#. Перейдите на `страницу проекта на GitHub <https://github.com/techwri/techwritersru>`__.
#. Нажмите кнопку :guilabel:`Fork`.
#. Не изменяя настроек по умолчанию, нажмите кнопку :guilabel:`Create fork`.

   В вашем профиле GitHub будет создана копия репозитория.

Шаг 1: Клонирование репозитория
===============================

.. attention:: Для клонирования репозитория используйте ветку ``develop``!

Для начала вам нужно скопировать (клонировать) репозиторий проекта. Вы создадите на своем локальном компьютере копию форка, в который и будете вносить изменения.

#. На странице репозитория нажмите кнопку :guilabel:`Code`.
#. В открывшейся панели на вкладке :guilabel:`Local` выберите вкладку :guilabel:`SSH`.
#. Скопируйте путь к репозиторию в буфер обмена.
#. Запустите эмулятор терминала и выполните команду клонирования репозитория с GitHub на локальный компьютер:

   .. code-block:: bash

      git clone ссылка-на-репозиторий

#. Переключитесь на ветку ``develop``:

      git checkout -b develop

Шаг 2: Создание рабочей ветки и переключение на неё
===================================================

.. attention:: Вносить изменения напрямую в ветки ``develop`` и ``master`` запрещено.

Для внесения изменений в проект следует создать от ветки ``develop`` новую ветку, далее называемую рабочей, и все изменения делать в ней.

#. Перейдите в папку проекта:

   .. code-block:: bash

      cd techwritersru/

#. Создайте новую ветку для ваших изменений:

   .. code-block:: bash

      git checkout -b название-вашей-ветки

Шаг 3: Внесение изменений
=========================

Внесите необходимые изменения в файлы проекта, используя любой текстовый редактор.

Шаг 4: Добавить и зафиксировать изменения (commit)
==================================================

На этом шаге вы фиксируете все изменения локально.

#. Добавьте изменения в индекс:

   .. code-block:: bash

      git add .

#. Сделайте коммит с описанием ваших изменений:

   .. code-block:: bash

      git commit -m "Описание ваших изменений"

Шаг 5: Отправка изменений на GitHub
===================================

#. Создайте одноимённую ветку на GitHub:

   .. code-block:: bash

      git push origin --set-upstream название-вашей-ветки

Шаг 6: Создание Pull Request
============================

Чтобы сделанные в вашем репозитории изменения попали в код проекта, необходимо создать Pull Request из вашего репозитория в основной.

#. Откройте страницу вашего форка на GitHub.
#. Нажмите кнопку :guilabel:`New Pull Request`.
#. Заполните форму создания PR.
#. Добавьте описание ваших изменений (на русском языке).
#. Нажмите кнопку :guilabel:`Create Pull Request`.

Шаг 7: Обсуждение и слияние
===========================

#. Ожидайте комментарии и обратную связь от владельца проекта.
#. Владелец проекта может слить ваши изменения с основной веткой после проверки и одобрения.

Шаг 8: Синхронизация с основным проектом (при необходимости)
============================================================

#. Если ваш Pull Request принят, вы можете удалить ветку и создать новую с последним состоянием основной ветки:

   .. code-block:: bash

      git checkout main
      git pull upstream main

#. Если вы хотите обновить свою ветку до последнего состояния основной ветки:

   .. code-block:: bash

      git checkout your-feature-branch
      git merge main

.. note::
   Важно следовать указаниям и рекомендациям владельца проекта для внесения вклада.

Инструкции для администратора
=============================

Как принимать изменения (Pull requests) из других веток
-------------------------------------------------------

Для принятия Pull Request на GitHub, выполните следующие шаги:

#. Откройте ваш репозиторий на GitHub.
#. Перейдите в раздел :guilabel:`Pull Requests` в верхней части страницы вашего репозитория.
#. Найдите нужный PR в списке открытых PR.
#. Нажмите на заголовок PR, чтобы открыть его страницу.
#. На странице PR вы увидите кнопку :guilabel:`Merge`.
#. GitHub предоставит вам опции для слияния PR. Вы можете выбрать, каким образом вы хотите сливать изменения:

   - "Create a merge commit" -- в этом случае будут сохранены детали всех изменений и коммитов из ветки PR. В истории коммитов появятся дополнительные коммиты слияния, чтобы показать, какие изменения были внесены из PR.
   - "Squash and merge" -- в этом случае все изменения из ветки PR объединяются в один коммит, что делает историю коммитов более чистой и упрощенной.

      .. tip:: Этот способ слияния является рекомендуемым, так как позволяет избежать заполнения истории изменений малозначимыми и техническими коммитами.

#. Нажмите кнопку :guilabel:`Confirm merge`, чтобы выполнить слияние.

.. attention:: После выполнения слияния на GitHub обновите локальный репозиторий.


Загрузка изменений в ветку ``master``
-------------------------------------

#. Переключитесь на ветку ``develop``:

   .. code-block:: bash

      git checkout develop

#. Получите последнюю версию ветки ``develop`` из репозитория:

   .. code-block:: bash

      git pull origin develop

#. Переключитесь на ветку ``master``:

   .. code-block:: bash

      git checkout master

#. Создайте коммит-слияние ветки ``master`` с веткой ``develop``:

      git merge -m "ваш комментарий" develop

#. Обновите ветку в репозитории на GitHub:

      git push origin master
