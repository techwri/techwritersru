.. _contributing:

Внесение вклада в проект
########################

Этот документ предоставляет руководство по тому, как внести вклад в проект.
Для краткости далее Pull Request сокращен до «PR».

В общих чертах процесс состоит из следующих этапов:

#. Создание Issue.
#. Создание форка репозитория.
#. Клонирование форка на локальный компьютер.
#. Создание рабочей ветки.
#. Внесение изменений.
#. Фиксация изменений.
#. Выталкивание изменений на GitHub.
#. Прохождение автоматической проверки качества кода.
#. Оформление PR в основной репозиторий проекта.
#. Слияние PR с веткой ``master``.

Далее каждый шаг рассматривается более подробно.

.. _contributing_create_issue:

Создание Issue
==============

Чтобы предложить изменение, оформите его как Issue в репозитории проекта.
Для этого:

#. Перейдите в раздел `Issues <https://github.com/techwri/techwritersru/issues>`__.
#. Нажмите кнопку :guilabel:`New issue`.
#. В поле **Title** введите краткое описание изменения.
#. В поле **Add a decription** опишите изменение более развёрнуто.
#. Нажмите кнопку :guilabel:`Submit new issue`.

**Общие правила создания Issue**

*  Перед созданием Issue убедитесь, что такого же или похожего Issue ещё нет.

*  Не создавайте Issue, требующего переработки сразу нескольких разделов сайта.
   Лучше создайте несколько отдельных Issue.

   Помните, что «быстро -- это медленно без остановок».

*  Не создавайте отдельные Issue на каждую опечатку.


.. _contributing_create_fork:

Создание форка репозитория
==========================

Создайте форк репозитория -- собственную копию, с которой будете работать.

#. Перейдите на `страницу проекта на GitHub <https://github.com/techwri/techwritersru>`__.
#. Нажмите кнопку :guilabel:`Fork`.
#. Не изменяя настроек по умолчанию, нажмите кнопку :guilabel:`Create fork`.

В вашем профиле GitHub будет создан форк репозитория.


.. _contributing_clone_repository_fork:

Клонирование форка репозитория
==============================

.. attention:: Для клонирования репозитория используйте ветку ``develop``!

Клонируйте форк из своего профиля GitHub на локальный компьютер:

#. На странице репозитория нажмите кнопку :guilabel:`Code`.
#. В открывшейся панели на вкладке :guilabel:`Local` выберите вкладку :guilabel:`SSH`.
#. Скопируйте путь к репозиторию в буфер обмена.
#. Запустите эмулятор терминала и выполните команду клонирования репозитория с GitHub на локальный компьютер:

   .. code-block:: bash

      git clone ssh://git@github.com:<profile>/techwritersru.git

   где ``<profile>`` -- название вашего профиля на GitHub.

#. Добавьте в список источников основной репозиторий проекта:

   .. code-block:: bash

      git remote add upstream ssh://git@github.com:techwri/techwritersru.git

   Основной источник понадобится вам для синхронизации форка с основным репозиторием.
   Далее он будет называться ``upstream``.


.. _contributing_checkout:

Создание рабочей ветки
======================

.. attention:: Вносить изменения напрямую в ветки ``master``, ``develop`` и ``test`` запрещено!

#. Перейдите в каталог репозитория:

   .. code-block:: bash

      cd techwritersru/

#. Переключитесь на ветку ``develop``:

   .. code-block:: bash

      git checkout develop

#. Получите самую свежую версию кода из ``upstream``:

   .. code-block:: bash

      git pull develop upstream

#. Создайте новую ветку:

   .. code-block:: bash

      git checkout -b <type>/issue-<issue>-<description>

   где:

   *  ``<type>`` -- тип нововведения:

      *  ``bugfix`` -- исправление ошибки;
      *  ``feature`` -- новый контент.

   *  ``<issue>`` -- номер Issue в основном репозитории проекта.

   *  ``<description>`` -- краткое описание изменений на английском языке.


.. _contributing_editing:

Внесение изменений
==================

Внесите необходимые изменения в файлы проекта, используя любой текстовый редактор.
При этом не забудьте включить поддержку `EditorConfig <https://editorconfig.org>`__.

Соблюдайте следующие правила:

*  Не выходите за рамки задачи, описанной в Issue.
*  Не оставляйте висячих пробелов.
*  Не используйте средства автоматического форматирования, если они изменяют строки, не имеющие отношения к Issue.

   Это значительно увеличивает объём изменений, которые должен проверить ревьюер.
   Мы оставляем за собой право отклонять такие PR без объяснения причин.


.. _contributing_commit:

Фиксация изменений
==================

#. После того, как все изменения будут сделаны, выполните сборку проекта локально.

   Это можно сделать различными способами, например, в виртуальном окружении Python или с помощью Docker-контейнера.
   В любом случае, сайт должен собираться без ошибок и предупреждений.

#. Добавьте изменения в индекс:

   .. code-block:: bash

      git add .

#. Зафиксируйте изменения:

   .. code-block:: bash

      git commit -m "ISSUE-<issue> <description>"

   где:

   *  ``<issue>`` -- номер Issue в основном репозитории проекта;
   *  ``<description>`` -- краткое описание сделанных изменений на английском языке.

      .. note::

         *  Общая длина комментария не должна превышать 80 знаков.
         *  Описание изменений должно отвечать на вопрос «Что сделают эти изменения?»


.. _contributing_push:

Выталкивание изменений на GitHub
================================

Вытолкните (push) изменения на GitHub:

.. code-block:: bash

   git push origin --set-upstream <branch>

где ``<branch>>`` -- название созданной ранее ветки.


.. _contributing_github_actions:

Прохождение автоматической проверки качества кода
=================================================

#. Перейдите на страницу форка в своем профиле GitHub и выберите вкладку :guilabel:`Pull requests`.

#. Нажмите кнопку :guilabel:`New pull request`.

#. На странице **Comparing changes**:

   #. В поле :guilabel:`base repository` выберите свой форк репозитория.
   #. В поле :guilabel:`base` выберите как целевую ветку ``master``.
   #. Нажмите кнопку :guilabel:`Create pull request`.

#. Заполните форму **Open a pull request**:

   *  :guilabel:`Add a title` -- введите краткое описание сделанных изменений.
   *  :guilabel:`Add a description` -- введите более подробное описание сделанных изменений.
      В конце сообщения для связи PR с Issue добавьте строку:

      .. code-block:: text

         #<issue>

      где ``<issue>`` -- номер Issue в основном репозитории проекта.

#. Нажмите кнопку :guilabel:`Create pull request`.

#. Перейдите во вкладку **Actions**.

   Для нового PR будет запущен процесс автоматической сборки и тестирования.
   Подробности см. в разделе :ref:`ci-cd`.

#. Дождитесь завершения Workflow, запущенного после создания PR.

   Если результат выполнения Workflow отличается от зелёного, изучите сообщения об ошибках и сделайте необходимые изменения в коде проекта, после чего вытолкните их в ту же ветку и посмотрите, пройдёт ли он проверку.


.. _contributing_pr_to_develop:

Оформление PR в основной репозиторий проекта
============================================

#. Если автоматическая проверка качества кода прошла успешна, перенаправьте созданный ранее PR в ветку ``develop`` основного репозитория проекта.

#. Дождитесь реакции контрибьюторов.

   Кто-то из них посмотрит ваш PR, и, возможно, оставит комментарии.
   Внесите требуемые изменения и передайте PR на повторное ревью.

.. note:: Если вы не согласны с результатами ревью -- оставьте комментарии к замечаниям, которые считаете несправедливыми.


.. _contributing_merge:

Слияние PR с веткой ``develop``
==============================

Когда PR будет готов к слиянию с ``develop``, кто-то из контрибьюторов сделает слияние и закроет связанный Issue.
В этом случае выполните следующие действия:

#. Переключитесь на ветку ``develop``:

   .. code-block:: bash

      git checkout develop

#. Получите актуальную ревизию кода из ``upstream``:

   .. code-block:: bash

      git pull develop upstream

#. Удалите локальную копию созданной ранее рабочей ветки:

   .. code-block:: bash

      git branch -D <branch>

#. Перейдите на страницу форка на GitHub и удалите копию рабочей ветки из него.


.. _admin_manuals:

Инструкции для администратора
=============================

Краткие инструкции для администраторов проекта.

.. _admin_manuals_pr:

Как принимать изменения (Pull requests) из других веток
-------------------------------------------------------

Для принятия PR на GitHub выполните следующие шаги:

#. Откройте страницу проекта на GitHub.
#. Перейдите во вкладку :guilabel:`Pull Requests`.
#. Найдите нужный PR в списке открытых PR.
#. Нажмите на заголовок PR, чтобы открыть его страницу.
#. Убедитесь, что автоматическая проверка кода успешно пройдена.
#. Убедитесь, что PR:

   *  содержит только изменения, описанные в связанном Issue;
   *  не содержит изменений, не имеющих отношения к Issue.

#. При необходимости оставьте комментарии и верните PR на доработку.
#. Если PR не требует доработки, либо все нужные правки уже сделаны, нажмите кнопку :guilabel:`Merge`.
#. Выберите тип слияния **Squash and merge**.
#. Нажмите кнопку :guilabel:`Confirm merge`, чтобы выполнить слияние.
